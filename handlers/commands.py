from aiogram import F, types
from aiogram.filters import Command
from aiogram.types import (Message,
                           ReplyKeyboardRemove,
                           KeyboardButton)
from keyboards.all_kb import points_kb, easter, get_confirm_kb
from classes import text
from classes.states import ReportStates
from classes.text import POINT_PLANS, user_report
from aiogram.fsm.context import FSMContext
from functions.func import format_report
from create_bot import bot, admin, router

#—Ç–µ —Å–∞–º—ã–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
@router.message(F.text == '–ö—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å?')
async def easter_text(message: Message):
    await message.answer('–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –†–æ–¥–Ω–∏–∫–æ–≤ –í–ª–∞–¥–∏—Å–ª–∞–≤.\n –°–∞–º—ã–π —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π, —Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π, –∫—Ä—É—Ç–æ–π –∏ —Å–∫—Ä–æ–º–Ω—ã–π –ø–∞—Ä–µ–Ω—å.', reply_markup=easter())
#...(–¥–∞–ª—å—à–µ –∫–æ–º–∞–Ω–¥—ã, –Ω—É–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–ª–∞–Ω–æ–≤ –ø–æ —Ç–æ—á–∫–µ, –ø–æ–∫–∞ —á—Ç–æ –ª–µ–Ω—å)...
@router.message(Command('start'))
async def cmd_start(message: Message):
    await message.answer(text.start_text, reply_markup=ReplyKeyboardRemove())

@router.message(Command('report'))
async def cmd_report(message: Message, state: FSMContext):
    await state.set_state(ReportStates.waiting_for_point)
    await message.answer('üöÄ<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è!</b>\n\n'
                         '<u>üìç–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ç–æ—á–∫—É:</u>',reply_markup=points_kb())
#—Ç—É—Ç —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–æ—á–∫–∏
@router.message(ReportStates.waiting_for_point, F.text.in_(POINT_PLANS.keys()))
async def point_selected(message: Message, state: FSMContext):
    point = message.text
    user_report[message.from_user.id] = {
        'point': point,
        'point_data': POINT_PLANS[point]
    }
    if point == 'S312': #—Ç—É—Ç –ø–∞—Å—Ö–∞–ª–æ—á–∫–∞
        await message.answer('<b>–û–¢–î–ï–õ–¨–ù–û –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú –ö–ê–ñ–î–û–ì–û –°–û–¢–†–£–î–ò–ö–ê –° –ó–ê–í–ï–†–®–ï–ù–ò–ï–ú –°–ú–ï–ù–´!!!</b>\n\n'
                             '<b>–ú–´ –î–ê–ñ–ï –ù–ï –ü–†–ï–î–°–¢–ê–í–õ–Ø–ï–ú –ö–ê–ö –í–´ –í–´–ñ–ò–õ–ò –í –≠–¢–û–ú –ê–î–£ 0_0</b>')
        await state.set_state(ReportStates.waiting_for_sim)
        await message.answer(f'<b>‚úÖ–í–∞—à–∞ —Ç–æ—á–∫–∞: <u>{point}</u></b>\n\n'
                             f'üìç<b>–ü–ª–∞–Ω –ø–æ SIM –Ω–∞ —Ç–≤–æ—é —Ç–æ—á–∫—É: <u>{POINT_PLANS[point]['sim_plan']}</u></b>\n\n'
                           '<u>üìã–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö SIM:</u>',
                             #cancel_button
                          reply_markup=ReplyKeyboardRemove())
    else:
        await state.set_state(ReportStates.waiting_for_sim)
        await message.answer(f'<b>‚úÖ–í–∞—à–∞ —Ç–æ—á–∫–∞: <u>{point}</u></b>\n\n'
                            f'üìç<b>–ü–ª–∞–Ω –ø–æ SIM –Ω–∞ —Ç–≤–æ—é —Ç–æ—á–∫—É: <u>{POINT_PLANS[point]['sim_plan']}</u></b>\n\n'
                            '<u>üìã–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö SIM:</u>',
                            # cancel_button
                            reply_markup=ReplyKeyboardRemove())
#...(–¥–∞–ª—å—à–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)...
@router.message(ReportStates.waiting_for_sim)
async def process_sim(message: Message, state: FSMContext):
    sim_sold = int(message.text)
    user_report[message.from_user.id]['sim_sold'] = sim_sold
    await state.set_state(ReportStates.waiting_for_cubes)
    await message.answer(f'<b>‚úÖ–ü—Ä–æ–¥–∞–Ω–æ SIM: <u>{sim_sold}</u></b>\n\n'
                         f'üìç<b>–ü–ª–∞–Ω –ø–æ –∫—É–±–∏–∫–∞–º –Ω–∞ —Ç–≤–æ—é —Ç–æ—á–∫—É: <u>{user_report[message.from_user.id]['point_data']['cubes_plan']}</u></b>\n\n'
                         'üìã<u>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∫—É–±–∏–∫–æ–≤:</u>')

@router.message(ReportStates.waiting_for_cubes)
async def process_cubes(message: Message, state: FSMContext):
    cubes_sold = int(message.text)
    user_report[message.from_user.id]['cubes_sold'] = cubes_sold
    await state.set_state(ReportStates.waiting_for_credit)
    await message.answer(f'‚úÖ<b>–ü—Ä–æ–¥–∞–Ω–æ –∫—É–±–∏–∫–æ–≤: <u>{cubes_sold}</u></b>\n\n'
                         f'üìç<b>–ü–ª–∞–Ω –ø–æ –∫—Ä–µ–¥–∏—Ç–Ω—ã–º –∑–∞—è–≤–∫–∞–º –Ω–∞ —Ç–≤–æ—é —Ç–æ—á–∫—É: <u>{user_report[message.from_user.id]['point_data']['credit_plan']}</u></b>\n\n'
                         'üìã<u>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫—Ä–µ–¥–∏—Ç:</u>')

@router.message(ReportStates.waiting_for_credit)
async def process_credit(message: Message, state: FSMContext):
    credit_apps = int(message.text)
    user_report[message.from_user.id]['credit_apps'] = credit_apps
    await state.set_state(ReportStates.waiting_for_double)
    await message.answer(f'‚úÖ<b>–ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è: <u>{credit_apps}</u></b>\n\n'
                         f'üìç<b>–ü–ª–∞–Ω –ø–æ SIM —Å –¥–≤–æ–π–Ω–æ–π –≤—ã–≥–æ–¥–æ–π –Ω–∞ —Ç–≤–æ—é —Ç–æ—á–∫—É: <u>{user_report[message.from_user.id]['point_data']['double_plan']}</u></b>\n\n'
                         'üìã<u>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö SIM —Å –¥–≤–æ–π–Ω–æ–π –≤—ã–≥–æ–¥–æ–π:</u>')

@router.message(ReportStates.waiting_for_double)
async def process_double(message: Message, state: FSMContext):
    double_sold = int(message.text)
    user_report[message.from_user.id]['double_sold'] = double_sold
    await state.set_state(ReportStates.confirmation)
    await message.answer('‚úÖ–û—Ç–ª–∏—á–Ω–æ, –æ—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!\n\n'
                         'üìã–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º.\n\n'
                         '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.', reply_markup=types.ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')]], resize_keyboard=True))
#–ø–∏—à–µ–º –∫–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É
@router.message(ReportStates.confirmation)
async def confirm(message: Message, state: FSMContext):
    if message.text.lower() != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        user_report[message.from_user.id]['comment'] = message.text
    report = format_report(user_report[message.from_user.id])
    await message.answer('üìù<b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞:</b>\n\n' + report, parse_mode='HTML', reply_markup=get_confirm_kb())
    await state.set_state(ReportStates.final_confirmation)

@router.message(ReportStates.final_confirmation, F.text == '‚úÖ–û—Ç–ø—Ä–∞–≤–∏—Ç—å')
async def send_report(message: Message, state: FSMContext):
    report = format_report(user_report[message.from_user.id])
    await bot.send_message(admin, report, parse_mode='HTML')
    await message.answer('‚úÖ–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', reply_markup=ReplyKeyboardRemove())
    await state.clear()

@router.message(ReportStates.final_confirmation, F.text == '‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
async def edit_report(message: Message, state: FSMContext):
    await state.set_state(ReportStates.waiting_for_sim)
    await message.answer('<b>–ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç—á—ë—Ç.</b>\n\n'
                         '<u>üìã–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö SIM:</u>', reply_markup=ReplyKeyboardRemove())