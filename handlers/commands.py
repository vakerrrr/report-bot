from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import (Message,
                           ReplyKeyboardRemove)
from keyboards.all_kb import points_kb
import text
from states import ReportStates
from text import POINT_PLANS, user_report
from aiogram.fsm.context import FSMContext

router = Router()

@router.message(Command('start'))
async def cmd_start(message: Message):
    await message.answer(text.start_text, reply_markup=ReplyKeyboardRemove())

@router.message(Command('report'))
async def cmd_report(message: Message, state: FSMContext):
    await state.set_state(ReportStates.waiting_for_point)
    await message.answer('üöÄ<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è!</b>\n\n'
                         '<u>üìç–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ç–æ—á–∫—É:</u>',reply_markup=points_kb())

@router.message(ReportStates.waiting_for_point, F.text.in_(POINT_PLANS.keys()))
async def point_selected(message: Message, state: FSMContext):
    point = message.text
    user_report[message.from_user.id] = {
        'point': point,
        'point_data': POINT_PLANS[point]
    }
    if point == 'S312':
        await message.answer('<b>–û–¢–î–ï–õ–¨–ù–û –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú –ö–ê–ñ–î–û–ì–û –°–û–¢–†–£–î–ò–ö–ê –° –ó–ê–í–ï–†–®–ï–ù–ò–ï–ú –°–ú–ï–ù–´!!!</b>\n\n'
                             '<b>–ú–´ –î–ê–ñ–ï –ù–ï –ü–†–ï–î–°–¢–ê–í–õ–Ø–ï–ú –ö–ê–ö –í–´ –í–´–ñ–ò–õ–ò –í –≠–¢–û–ú –ê–î–£ 0_0</b>')
        await state.set_state(ReportStates.waiting_for_sim)
        await message.answer(f'<b>‚úÖ–í–∞—à–∞ —Ç–æ—á–∫–∞: <u>{point}</u></b>\n\n'
                             f'üìç<b>–ü–ª–∞–Ω –ø–æ SIM: <u>{POINT_PLANS[point]['sim_plan']}</u></b>\n\n'
                           '<u>üìã–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö SIM:</u>',
                             #cancel_button
                          reply_markup=ReplyKeyboardRemove())
    else:
        await state.set_state(ReportStates.waiting_for_sim)
        await message.answer(f'<b>‚úÖ–í–∞—à–∞ —Ç–æ—á–∫–∞: <u>{point}</u></b>\n\n'
                            f'üìç<b>–ü–ª–∞–Ω –ø–æ SIM: <u>{POINT_PLANS[point]['sim_plan']}</u></b>\n\n'
                            '<u>üìã–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö SIM:</u>',
                            # cancel_button
                            reply_markup=ReplyKeyboardRemove())

@router.message(ReportStates.waiting_for_sim)
async def process_sim(message: Message, state: FSMContext):
    sim_sold = int(message.text)
    user_report[message.from_user.id]['sim_sold'] = sim_sold
    await state.set_state(ReportStates.waiting_for_cubes)
    await message.answer(f'<b>‚úÖ–ü—Ä–æ–¥–∞–Ω–æ SIM: <u>{sim_sold}</u></b>\n\n'
                         f'üìç<b>–ü–ª–∞–Ω –ø–æ –∫—É–±–∏–∫–∞–º –Ω–∞ —Ç–≤–æ—é —Ç–æ—á–∫—É: <u>{user_report[message.from_user.id]['point_data']['cubes_plan']}</u></b>\n\n'
                         'üìã<u>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∫—É–±–∏–∫–æ–≤:</u>')

@router.message(ReportStates.waiting_for_cubes)
async def process_cubes(message: Message, state: FSMContext):
    cubes_sold = int(message.text)
    user_report[message.from_user.id]['cubes_sold'] = cubes_sold
    await state.set_state(ReportStates.waiting_for_credit)
    await message.answer(f'‚úÖ<b>–ü—Ä–æ–¥–∞–Ω–æ –∫—É–±–∏–∫–æ–≤: <u>{cubes_sold}</u></b>\n\n'
                         f'üìç<b>–ü–ª–∞–Ω –ø–æ –∫—Ä–µ–¥–∏—Ç–Ω—ã–º –∑–∞—è–≤–∫–∞–º –Ω–∞ —Ç–≤–æ—é —Ç–æ—á–∫—É: <u>{user_report[message.from_user.id]['point_data']['credit_plan']}</u></b>\n\n'
                         'üìã<u>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫—Ä–µ–¥–∏—Ç:</u>')

@router.message(ReportStates.waiting_for_credit)
async def process_credit(message: Message, state: FSMContext):
    credit_apps = int(message.text)
    user_report[message.from_user.id]['credit_apps'] = credit_apps
    await state.set_state(ReportStates.waiting_for_double)
    await message.answer(f'‚úÖ<b>–ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è: <u>{credit_apps}</u></b>\n\n'
                         f'üìç<b>–ü–ª–∞–Ω –ø–æ SIM —Å –¥–≤–æ–π–Ω–æ–π –≤—ã–≥–æ–¥–æ–π –Ω–∞ —Ç–≤–æ—é —Ç–æ—á–∫—É: <u>{user_report[message.from_user.id]['point_data']['double_plan']}</u></b>\n\n'
                         'üìã<u>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö SIM —Å –¥–≤–æ–π–Ω–æ–π –≤—ã–≥–æ–¥–æ–π:</u>')

@router.message(ReportStates.waiting_for_double)
async def process_double(message: Message, state: FSMContext):
    double_sold = int(message.text)
    user_report[message.from_user.id]['double_sold'] = double_sold
